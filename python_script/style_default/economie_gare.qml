<!DOCTYPE qgis PUBLIC 'http://mrcc.com/qgis.dtd' 'SYSTEM'>
<qgis version="3.4.7-Madeira" minScale="1e+08" simplifyLocal="1" simplifyDrawingHints="0" labelsEnabled="0" simplifyDrawingTol="1" readOnly="0" styleCategories="AllStyleCategories" maxScale="0" simplifyAlgorithm="0" simplifyMaxScale="1" hasScaleBasedVisibilityFlag="0">
  <flags>
    <Identifiable>1</Identifiable>
    <Removable>1</Removable>
    <Searchable>1</Searchable>
  </flags>
  <renderer-v2 toleranceUnitScale="3x:0,0,0,0,0,0" type="pointCluster" forceraster="0" tolerance="20" toleranceUnit="MM" enableorderby="0">
    <renderer-v2 type="singleSymbol" symbollevels="0" forceraster="0" enableorderby="0">
      <symbols>
        <symbol type="marker" force_rhr="0" alpha="1" clip_to_extent="1" name="0">
          <layer class="SvgMarker" enabled="1" pass="0" locked="0">
            <prop v="0" k="angle"/>
            <prop v="231,113,72,255" k="color"/>
            <prop v="0" k="fixedAspectRatio"/>
            <prop v="1" k="horizontal_anchor_point"/>
            <prop v="base64:" k="name"/>
            <prop v="0,0" k="offset"/>
            <prop v="3x:0,0,0,0,0,0" k="offset_map_unit_scale"/>
            <prop v="MM" k="offset_unit"/>
            <prop v="35,35,35,255" k="outline_color"/>
            <prop v="0" k="outline_width"/>
            <prop v="3x:0,0,0,0,0,0" k="outline_width_map_unit_scale"/>
            <prop v="MM" k="outline_width_unit"/>
            <prop v="diameter" k="scale_method"/>
            <prop v="40" k="size"/>
            <prop v="3x:0,0,0,0,0,0" k="size_map_unit_scale"/>
            <prop v="Pixel" k="size_unit"/>
            <prop v="1" k="vertical_anchor_point"/>
            <data_defined_properties>
              <Option type="Map">
                <Option value="" type="QString" name="name"/>
                <Option name="properties"/>
                <Option value="collection" type="QString" name="type"/>
              </Option>
            </data_defined_properties>
          </layer>
        </symbol>
      </symbols>
      <rotation/>
      <sizescale/>
    </renderer-v2>
    <symbol type="marker" force_rhr="0" alpha="1" clip_to_extent="1" name="centerSymbol">
      <layer class="SvgMarker" enabled="1" pass="0" locked="0">
        <prop v="0" k="angle"/>
        <prop v="245,75,80,255" k="color"/>
        <prop v="0" k="fixedAspectRatio"/>
        <prop v="1" k="horizontal_anchor_point"/>
        <prop v="base64:PD94bWwgdmVyc2lvbj0iMS4wIiA/Pgo8c3ZnIGlkPSJteVN2ZyIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayI+Cgk8aW1hZ2UgaGVpZ2h0PSIxNjAiIHdpZHRoPSIxNjAiIHhsaW5rOmhyZWY9ImRhdGE6aW1hZ2UvcG5nO2Jhc2U2NCxpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBS0FBQUFDZ0NBWUFBQUNMejJjdEFBQUFDWEJJV1hNQUFBN0VBQUFPeEFHVkt3NGJBQUFnQUVsRVFWUjRuTzI5ZVpnbFYzVW4rRHMzNHNWYjhyM2NNeXN6bGJXb1ZKSnFFYUFTaFFSQ0lLUUdHaGhqWTdNMURaNnZiY0RUWSt6bW8yMmF6OU40Ykk4L3QxdTJlenhqTjkzNE05aGpGcXV4alljQkF3WUxiUlN5MEZJU1drcWxVaTFaVmFtczNOZVhiNG00OTU3NTQ4YjY4cjNNbDNzVzFLbXY4bVgrWHNTTmUyK2NPT2Y4emwyQ21Cay9xZEszcTBjUWdQYTJWbnVna003M3lNbld2clRYMjkrV0hlelBXL3NIQ3ZhaFhFcDB0cVd0Z2Y1QzZwZ2dDQUJnQU9TWHdRREFEQkNGbjVvaEw4MjVEODlXMUVoWjZ0bVJCZm5peUlJNk56cGZIaG1yV0pOalZ0ZjgyS0xubmo1enZySk5UZDh4UWo4cENyaG5WNWNBSUc2NmZtL3J2cTZXOXV2ZG9jRUJxN2gvVjJ0Nno5NkNkVFRqMk8zQ2RuSmEyTFptemdDVUVZUWNFV3hCbEVrSjVJM2lFVURoYjBZWkdXRHp3MWRPaHF0NFZqTmNBRkl6U2dCWExDS1hXTHJLYzB2elpXL2twVG4xK05pOE8zeFp0d3hmY0hhUHZqUTZOLzNRa3llTFFaMkpTREN6anJmanh3MUxLR0R0Z2ZWT3ZKTGtVRitiL2VhajEzYmUwcDhkNkJlTGcyM3pGN3Q3MnJLSHBFaTFzckM3aVVTM2JWRnYzc1llaThnaElRUUpJUUNBaUFCQVVGaGF6TzVSOHU5QUVWSHpMSnMvVGY4RjNjeXN0ZFpLZW9wTFJZL09hY1lrV0UyVDlpYmh1Vk1UQytYVFkrbkIwVXRlZHZUWnkvUGozem81T1RzNk9hTzNXMUUyQzF2UkF1Nllpalp4elA1ZEhlTE9BZUhjc2ErUVA5TFgwdGZtVG5XUDY5d2VLOTF5SkN2MDRXeDFacUE3WjkxRVJFS2tNb0pTYVFBTUVBbXRXVEpyVGN5Q2lBQWlRVEF1MXdoREVFVVdEd3dpOGhXTFFTQndhUDhNQnBCbU1NRHdsWkRCUkpxSWhCRENabVpOSUxCWGhmSXEwbE82TkZYU0p4ZFRyV2RjeFM5YXNueG1WMnQyK01Ra2o1eVprYk5QVDNpbDQ1ZXE4dkw0ZUtKZi9MS3ZTTXpHQ2xMUEFtNEgxc3d4WkdLMFRnQzNBdmlGZ2tOM2RGdlZWbUZKVzZUU29NNCtlRXE1U25ORmFRV1MwdGc4SWxzQU5nbnlIV3ZzR29qYk9kL2FFYUxqL044RHB4d2M3Lzh1QkFqc3g0N0I5OHdNMWxwS3BWMHdOSVNqS1plMU14YmFkM2RZdDZPeWNMdDJ5MUNhM2JKRjQ0RCtjd0QzQVRnRllEWnFyKy9HL0J0NkpXSlhmQXo0bnJ1UFpRalUrN2JNK1o5N3kvN0N4MXJTOWdFU3dyaFF5NEVDYTJhVzBBeGlEUkpDZ0ZrSUlrRVVlVTNqVlEySldBMUd6S0hTMVpLVGxUQU4wdkN0TEROclprZ0dhdzBCODJEQUpxMEVsQVFBdUZJVlowdnVpYjg3VmZ3djl5LzJIUWRRdlAvRUtYZkRPM1VMNVlwUndMaTc3VzVyRVI5K1RkK0JXOUtUTis4djZOY05kaFZ1MStuVzdveUZBU0xLQUFRaUdHYUtLRDZqR2hVZ0lLRWRvYktzQXVNQUNNcE4wT01WTUk1Ylc0NzlOSXBKQklBNXZBWXphODBvdWl5R2FXNWsrcnlYdi85TU9mdlFQMTVPUDNQdjk1K2JyTmRYT3gyN1loUndvTHRkdk85UVN5WnJpNzRQWGFmZlNxbk1FWXR3Z3lQNFFJdERnOEpPUXhCc0lHN3UxMjdabXNYV1l3R2J4WHlsTk80YjBNeVF1bHJFQWp1blBhbE9LdGM5dGVEaHhjKzk0TjBIME96bkhodTlZcXppc2l4NEowaFhlNnY0MEkxMjdtZHZ5UGZsVXRiK09aY1A3Mi9GeC9LWjFJQ2RjbkpzMlZvcDdaS1dzSWdjTXVRQjdKTUdvTWJOK3JKUkdJY0VKUHJiZkxmeG1EYmFKN1ZtbCt5VVRheHN5S3AyWFc5KzJoV254OHY0YzZHcUorZGNYUHpDMks3SnJ6NzhsQXRFUVQ4UXhjMDdCVXVRa0oybWZFRElLZmZaaEEvMlpPbGZIMmdYZTVET1FXc3ROYk1MejBWS0NJY3NJZUxXS2U1d3FZNFYyeWdzWk1Tb3RXSWJqd2tBUkxCdGkyeXRwRllFS1ZJWmtYV3luUVBnMXc2NDFkZGVuSFlmbm5QNWkwVDRCd0NqcGt0MkJwR3NoKzFZRi93THgzYmxBUXgrNU5yU1BmdDM5OStSZGxLZEp1ZEJtZ2dKWmRzTTE5b3N0aFV1dUZsTWFXaXlMY0hWUlpSS3BlSEhaOUpmK3VQbjZCNEdpc2VmSDVJcmRQbTJ5S29Vc05rZ2N6MXllTERUL3EwM2ROOXlUVmE5YlgrTDkwNXlXdlpiQWpsQjVKaWhzQ0FkNGhNSnFpa2dmb2UyQ0dNMmJuZzdzTEFuQ05DYXRTRmNHc3pzVmxsTVdyT1hoNTViekgzNTVHTG0vdi8wL2RFejQzUGw0RnhkbXhMWkRteE5GbkN6RlBIWDNuN3o0RWY2Ujk5cXB6TnZzRlBPc1RZSE43SHRhTlphazJHRkFvaG42amdZc1FqK05EKzJFdU9sVWFCZnN5M0Jvb2dVWUpCbVpsOUpDUXpXVkZtMFo1WDlTTEVxank4VVN3L2Q4MkxMdzk4NE1SUU85MjIzckVoQzFxTll6WlIzMDdYOTR1TUhpcm51TlBlMTd0cjkxZ1BweFk5bUhmdWc3YVF6SkN3b3BTUVJpWGp3S21vdDBsVUJBT2p3VmpLWW9UVWdiV0U1V2t0ZHFsUkg1OHZlWXlWS2YvSDRxWkZId0R6OTc0OVh0dDB0cjBoQzFtUFZtaXhQQU5qRGpBOGY3VlQvbmtWQmF5SXB0WFl0cllWbENkdFBoNFd1SnZTQVYyUEFKWmp4RUFRaUZoYmdTQ2xkUlNTenVWeDNQb2Qzc2F5KzZ6anc4eUM2ajVsSHNjMnlyU1RrUTdmdEdmeVZtNnhmN012YkgyM0xaUWVsa3E0QWJFRVF0TTJLMVN5MjB4U3dFY2FBMWd3UUVjaE9pZUhSaVVmRzU4dC85dWxuVy8vdTBWTkRKV3lUYkJzSitmMDNkYnp4L1Fkei8yc3VtNzFkcEp4ZVFTUUUySWs2amFKRXNnRzJuRncwaTIwbkNWa0pZeUNjTUdGK2ttWkFlcDRzS2EwdWxqMzk0TzgvTXZ2SGYvbjB6TVVmZXhKeXphNXU4VWUzb1QwdGNNc05BeDBmN2NuZ1RaWWx1aUVzRFdaWVF0aCtxZ1ZCb0U5aDMyMHh1V2dXMjJZU3NoSVczRjN6YVRETmtLYnFXaXZGSS9OVjlhMnZQVC8xM3dFTS9ZY0haN2FVb0d3WkNUbDY4SUQ0dzFjdDlHVlMxakZoaVEvYzJOZjJQaEQ1Zy9BTUN4QWtTSVFrRHNuN2ZsWFdKL0VZV212V21pRk5xQU1iV3VQSmtlTC9VYXJLYjgrVzNGT2YvQ0hQVDB6UHJsam1Sc2pXa1JDQ25SSjRjM3RHZkd5Z3MzQ3IxQ2haZ2pNV3dUYnBCRE5uVHNSSXhrNkw5K3BoVjBvTUdEN1VmaHhvRVJ5L0tWcVQ1Yjc2bXZ6Ly90emw0c0JzeWYwaWdPTmJOU3EySlNUa2JRZTdlLy9rTGQzL3ZlRFEzWTZGVmdWUnNjQVpDaFBMSnAvWDBPQ0ZNUXdsZTNVbllERVhITGsvN0dpc1ZyTzBobFJFRll1UW15cFdUcncwdG5EdnYzdlUrcE56dzVjM1BVMnphZ1ZzZHZZeUFMemxRS3NBa1AvczNma3Y1M0l0dDFpMjFVbEVBZ3hZSXJDK0ZINHM2M0YzQ09Hb3haalpoQXBNQURHQzd0enBtR2xHNUdlVVdiOGlsTmJGU3RVYkdwOHJQZmh2SGtsL0NvQjg0ZXlGT3BOL04yWTYxb296b21zbHptSWFZY3lzMzM1OXdmblVyZmtiOXJaWlA1OUxPMit5YkpFUklsUTJRYXNKOE9KV1oxa3M0U2lqdzRMdk9JNHdrcWFnOWtIa3FQaDRzWWt5a29GKy9kSmlqSFJKOVFJYkZXdERNTTAvNEdFZ2NCQ1doRmhRbm0vbE9HYnRtc1ZpRmhJQVRDZ0VDRXUwaW5UcVlFOXJwdld2YjE5NGFiSXEvdUhYVTllTm9MYTNObWhDd3ByU01Ja0poWFd3dHh4b3MvKzMyL0lIcnluWTcrck0yYjhqbkt3SWVwLzhIM0gxTTFZa3FaQnhqR1BLUm9tYnlVRzlsbURtRDNNT2grNmRZbmRSQU1JR1dUWWdMUE1aRGJhQW5GeThOdEd2VmdvZ0szRnNRMkVOc0FJckwydzdNd05hQWRvejdsdDU1bStsd05MMTlUN29LL1pkdkYvdDBGc1FRZzNsNUlDY1dhZkM0ZWRxTU1UVWsxbnJtZG01YzBXWDc1a3E2L3QrOVluTXhaTm5MMjU0WExncUN4aTNjTXRoQVBKN1c2MmZiODNZdjI1bFdvUjBQZGV5eUVFc0VvbExQV3NZeCtyWnlpV1lzTXlOMEJxc0pLQWtvS3FBc0FIYkFXd0haTm1nVk5yY1VLY0ZsTytBMWRZTmNuSVFyYnVBbEdQS0ZoYXN2b05McnFtVkJMWHVBbVhiQWNzeENoWnpiK0duQmlBRUlDdmd5ang0Y1JMUUFBa0JsaFZ3ZVI2OE9BRzRMdFQ4dUgvTVBOVFVDQ0E5UUhzZzVZR1ZCOVllSUt2UVpJT0VEYklka0VoQk00TlloVFk0c29waGFMb3F6Tnk4U0JFMVdXNW5XK3NCek0xL2lyUjJBUG9jZ0EyZjZMcmhKT1J0Qjd0Ny85dWQ2YjlzeVdYZmxFcG5ja29xTjJVTFoxMkYxZ2IrMnUrMWdKMXFEUzRYd1dDSVhCNmkwQVZSNkFHeUhiQzZkME4wRFVLMDkwUGt1eUc2OXdFdG5TQTdiYXhIYUQwNVlSVldnNjFYNHA1WkY2ZkJ4UW5vaFhIbzJjdFEweGVoUjg2QkZ5ZWhGeWJBQzVQUUM1UFF3b1pJWlVGV0NoQUNyQlZFOEF3ZzZXSlhUMWFNWWlxaWltQ1ZtVnVzbkp1WUxYN3RaLytKUHpVeVByV2h4R1REU01qTk4xNEhFT3kvZVl0OWI4SG0yMjFMOUFvaEJCRE5URjZ6K0c3SUpLWUp6QnFzTmFBbGlBUW9WNEE5Y0FqVXVSdWljd0Npb3g5V1d6K1E2d0tsMHFCVTJyZUFLU0NWTVc0MGNNckx1UDVtc05ydjRpNnVXWXo5TmdJQXRBU1VCNWF1Y2NteUFxNVd3TlY1OFB3WTlQUXcxTlRMMEJObm9TY3ZRaTlNZ2QwS2tISkFKQUFTQ2RmdGQ5dXF5QXBIQ3FtWkdVcnJ5bUxWTy9YMDhQem4vKzMzNVdjQllIeHFka09JeVlhTWhBejBkb3N2M0dYMXBRVGVmTU0xbmYrM0xTZ25DRGI1Z2RLYVpxLzQ5UXJYN1RDTXk5UGF4Rzc1RG1QVk9nZGhkVjREYS9jclFQa3VpRnc3S05zS1pBb2dPeE92OU5KMnhQRFZLdDVHU3FpTWlGRWtqdHdxQU9PS3E0dmc4aHg0Y1E1NmJnUnFZZ2g2NmhMMDFDVmpLZWNtUUt3UnhycStNa1pVTGJwQ002TW8yaitId2RwVFBEOVQ4azU5Lyt6VXJ3RTQrVXZmbWRtUVRQV0drSkI3MzluVk9kanEzTjZlRWYreHY3TndqUDFaeXdJUURDUXM0S3B1Tkh3RkROUDRBckJUc0hxdWhUVndJK3pkTjhIcVB3VHF1QWFpcmRmdlIxK2hBS09zZ0QrRHh2Z21DbndVNnNlZXE1VU5zWUExOXlCU3lKZ2xFeUlaTzdNQ2wrYWc1OGVneDg5Q0RwMkFQUDhrOU53NHVGSUVsRFRrS3g1THI1S1lCTkc2Qm12TjVwNCsrL0xjWjJkSzh2TlBqU3llK3QxSEY5WTlpV0ZEU01qZi8yelBMY0lTSHh6b0xOd3FJVXFDMlNFLzFWSjdpMWNpSEJFVy9DYkFYaG13TEZqNURvaHJEaU43MTBjaCtnOFpTK2QzbUttWWdnbW5mWllZdXdFVVhJZldGKy9WWXJWMWI3NTkxUEQ3U0NrSUpNaUVHd3d3NjhoVjJ6WW8zd1VyM3dWcjREQ2NtOThKZWZZNHFrOTlFL0xzNDFDVEZ3SFBBem01eUtXdWtwakVLS01nWnEyWWlxOGFhUDNsSjRmbnp4TmhIc0NaSlExYnBheWJoUHorbloxdi9KbWJ1ajYycStDOFJ5cFVVc1FaTkZDK2xZUjExQnRodmNwRldIdU9JSFhvTHFTTy9BdWtyajFtbEUwcEJFTmlZVzRIU0NpS1dZTytjY3JXQ05zS2lkK244SGZXSVRjemFTV1RHdEpqTDBHZWVnanVpZjhQY3VocElKVTFZWXRQMGtHckl5WmhZb2loRlZtdWtKWE1yTXQvOGh2UHRkM3pOdzg4T2JLZWRxMkxoSHpvdGoyRHYzTlUvMkZMTG50M3lrbDNnOWxmTWJaR0JZeGxZSmsxb0NTY0kzY2pkY3M3WVEwY2dTaDBnOUl0UVVYaXlhOUdkVTJVdlY3Q1VRL2JDQmZjRE5aWVlvb1M1RDY5Q25oeEJqd3pqUEpEbjRlNjhCUjBhUUVrclBDczFSQVRqaEVUemRDQ0lDcmw4cG01K1lXLy8xZmZULy9tajg2K0hDNy8zSktSa0p2Mjlnc1F4T2Z1VHY5aVM5YTVQV1ZaM1dDR0lBZ0c2VWd6MWlpc1Faa1cySU5INEx6dUE3QUdid0xsMmtFUUNPWUpoaWtaWUlsMXFxbnZFbGU1a2RoR3VPRFZZclVTS2d0OFJVeGxRRzI3UUlWdXBGLzNBYmpaVnNqelQ0Sm5SZzB4Q1hRVkRHcGlGQ1V5czlFOXRsT3B3Wlo4L3U3Zk9UVDF6d0MrNXZmTnFrZENWcVdBZ2VaKy9JWmlEc0Nldm56TFIwWEs2UTVhNUp2cmtQU3UxcG9RK2ZHT2s0WFZkejNTdDc0WHFZTnZpbko5ekNDUkhJRllMcGJhQ215ckxHQmpMRlE3UDAzbGh6SWd3RTRqZGZBdWdDd1FDWGd2SG9jdVRnTVVXY0w0UUdLZ21KR0N4ckRvS21CbUxWS09uU0pyMzBCYitzTy8rKzVqeHdITS8rWlhuMWgxb3JxSjhhUklBczN0VG5OZmw4TWZibXZKRFFvaXdhdzF6QTVRV3ZpS0ZBYjlOYkk4Um1EbHdlcTlGczZyM2dIbjVuZWF6ZzdZckdYVlpXMngraVUrdHdLclp3RzNHZ3YrTnYxT0VNSXk3cFlWbUJuMmpXOUU2alh2UnVyZ0hTR1dLQTlKOGhHUmtDUkpFYjRwSUVCQWE5aUUxdjI5aFo4Q2NDc1lyVmlEckRvRy9MWC82ZWJCZC9SWGYvcG9oL3FNSnRzVkJDY2lBRkZsbTVYNGpkUmVGVmIvOWNqYzhUOGpkZXpkWmdoTjY3cFdiaXZJeFU0aUlhdVJSSi82RHk4STBKTVg0SDcvTDFENS9sK0JuQnlJTEYvQlZqOWl3akFyNzhpeW9SZkd4YVVpL2N5dlAwYjNmZS9reUtwU002dXlnRWNHdTV3UDkxNSs2M1dweFk5cWtaSkl1UEQxeG4zRzlxZXV1dzJpLzBZemhzdTY0VTNlRG5kYkQ2dVh3OXRKbUxHS0pvOHE4bDF3YnZscFdOMzdBRExEZHdHWFl3QVViRDFNdkN3VzQzNUNLd1hSMGdseU11LzlqYVAwMmpyOXRVVEg0dGlxRlBBMzcraTh4VTVuNzh5bTdZTU1vWU5OdTJHcXVKcWk0cFVCQUxCU3NEcjZZZTE1RlVUSFlPaE82aDBMYkVlc1ZSL2JDUzY0Rmx2aU1ZSkF6azVEOU4wSSs4RHJRSmtDL0IwVVl1N1dKeHhNRFRFZ3NwaW1mSVltVzdabjdkczdjODVyUDMzMzRFQzhYaXVSa0tZVjhCZU83Y3J2enVtM3B4em5GdHRKWnlMckZGVzJWZ1hydWZmYWVNcVFNUWJMS3V6Qkk3QjZENEJ5N1g3akdoT01xeFp3ZVN3Wk1oam1DeEtnZEFHcHczZER0UFdGWGlheWRnZ0hreHBoUWRtK3FrTUFRaXNsQzJsN1g4RVJiN2lscmZyYWc3dDdtdGFyMVZqQXdXdGJ2SGUwT2JpSmhBVUNoK084QVJtclZiZW0wd3JNZ0Z1R09QQTZpTlllTXplUDlaTGp0NXR3MU1PMjI5bzFqZm56SDVrSjlvMnZoOVc3Mzh4NVZOS3NFOEh5SktRZUZ2M1hnaXhiNUMxMSt5dGIzUTlnRmRtVkZSV3dxNzFWZExjWHhFZXVMZDFEVG40LzIybXRsWktXb0ZYbkVHdUZpUHpKQlFLaWF3Q3B2VWRCbWZ4Nmk3MHE5U1JraUJKdzhyQ3VQUXJSc3hjTVFLOHpmcmVFc0pWU3JwUE41VEpkQXpmLzJzM3BYMnIyM0JXVjZFTTNwbklBOXUzZjNYV0hMVGdIclNBRTJjeExaN2tRZ05qVWk2UkpySXVSc1hRaUJkRTVBQ3AwZ2ExVW1OT3FUYmZVUzhIc0JPeEtFUlBOQ1JBenJLNDlFSzNkdnZ1SzN6U2dQcUZjRmhNQ1p2WlQxdEtEYnh2d1BuN1h6VGQ4QVVEcGdhZFBMenQvTUtHQVZEdk5xcnRkL1BYYlcvdHNRUjlNTzZsTzFxeGpWbDZET1VxckI1K0lKeTVqZWxjUEl6TFQwVzBIb3VEUE5LWm8vRFlleDhUcXVLT3dSc3E0VTdHUXFMVDFnM0lkb2RIZzRCZEtVcjhnMWxzV002Y0pCalNJbkphV2xnUHY2WnU5RmNBSkFOTllScFoxd2U4NzFKTEpPZGIrYXdyV3Z6WVg4V2M4QnVlRzhVWDgweDhxbzlpUVdTUE1yejFaTnFpMUY1VEtock13QUFvRDYxcGwzRWxZZUZOMlFweTNERllyMU5JRnlyWUJ3a3FNaHBoMndsaU1XTHk3TEJhZGJFWkwwaTI0cVNmMS9nTWRxYjdYSHh4TTdHem0xeS9FRWwvVVV1YXNMZnJtWEQ3Y2xoWjdHSkF4SGhTeG8vajU1cXZnaC9ta1pURDJjMHhPRnFKandPKzA2RWtOL3NjRC81MkkxWFR1anNUaS9VbEVob0JrQzBBNkI3Q3VhK2xNTzlFRUZ0d3pDRUVRVUVxL1lsZnVJOWQwWlBjUjROVHFGWnZkTUphZmpORFRsaGNQdksvdHJWbkgvaGc1T1JBcm00UDhVQjNsVzRzd00yRFpRTG9Gb3REbG95Sk16Y1E3Tkc1dHROWmhEZ3VneE5zT2ZDaFJ2MDNGZGtRWTZDZE5oQUJSZk1aTGpacjRWbHdJWWJRbFU0REl0ME9WNXRaMWRRSEVwbTBGWkljeFc2WDMvc3JSWEJIQXc0M09iYWlBSDc1MTF3Rmg0MGdoTFFZMWF5MEFRYkVJcnA2Qlh6VUpZWWJKVGVVZzhsMVJuQklOZXB1LzYxZ2VNNkMrSSs3K3poREdFa0pSanlURjQ5WkVnTDZrc0hvWFdBa0xyeTlnWnpDWUtkNVJnUGZVblVmMlBQSFE4eGZyRHRFMUpDRkhuY2xYV3RSOWcrVTRHZFphRWlFMmp5Y2lIT3NoSVdBR0xBdmtaRUM1TnRNNUZQcnNPckdXYi9HcUMxQVhud0dYNXFMNEU0bER0ZzdiSWM4QWF3V3I5MXFJN24zUm5FbGZHakYyQ3Y5VGpIeXNnWVFnaXFqSXQ0QWEwTGwwYXJDc3haR2YzcWNQQUhpbVhyM3JXc0QzM0gxcjVsTzkrbldPNFAwUXRtYmxock50bHhDUFdveUJjUHd3b2xkMU1UT2FJa0IyQnBSdGpUcUpsakkzMWhvQjNkS0xNNmllK0RyMHhCQkkyTUNTM1U1K2tzUTgrQ3hkT0xmOEZKeDhseC9YSVhHUDZoR25RSmlEaWNTeHBRQ0lERXl6V1BCa0VqTTBzN2FkZE1aeXE0ZXZ6eTdlZXVTNlBjODk3eTlzRHdnSU4zcFBDQUc5ZzEyRk8yeUg5bW1sWFVzSXA5WVFSSFFraVVVczEvOE1ENmlITVNBc3dNbWFDYWRFaUVZbTYzUWFBeVFJcUN4Q25uc2NhdVNrVVY1T0xxdU9YMjJ6TVk1YWpxV21jWXN3MW9Dc3dONTlFT3lWemJSN21DRzRXZ243Tk42V3NKL2piY0s2TUdJQWxvMGNGUTllN3l6Y0JhUy9BSDloTzY4MElmVnRtVE0vcDlJOTNiWnRhYTBsYkV1c2F0TENhc1VZY3hFdUoycm1lSkVwZ0hNZFpzMnYxcEVMQ2NLQjhOak54WWpackQ2TGZRTFlRZ3hnMW1CWkJaeWNlYUIzZ0FnQjIvTmswVW5aK2RiTzdvTjNIZW8vRE9EcDJ1TVNDcmgvVjRjZ2duamd2UjBmeTFoaWdBaTJhRUE2Tm9TRUJCQUpzN1ZHTE5hTGV3cmpqbjByRjFwRHc0VGhNK0xrNDFpbmNwdUo4WFppRlBVRk9FRW9taG1wTWNaeW8waElFaVBXanJCU0FqWjF2OVUrL1Y2c3BJQnZIQkFPZ002V3RIMGdjS1VVUkpkQVhjS3hiaEpDQXJEVFFEcWZMQk8xTHRpY2JkeTBmMjZvakFsdFhkcWhtNGxSRkl3dkRkUzNBalA5UVBWakE3K0tLNUFRMmhnU2tzQVlFTVNDaUlSalc5MEhkeFhlOGFyQmp0OENRZi9vMGt4OUYzekh2a0lld0swa0tOR3hEUWxIUFl5eENoTENBRmxtdzUxVTFwOGdLWlowMnBJMFROMnVOQjloaWlFV3BHNHF0Z0hCKy9vd3Z5dUpsejRvOFI3YUFoS1N4QWlDeUNZd2hLQmNkMnYyNWp2M3lsNEEwMFFVeG9JSkJieXByNlVQd0M5UWpGWFdic0VkNGY1MWE3QlZrNURRMHZwTnFjbmUxM1phM1NHbW1IdXZGd1pzS3NackQ5UTNGb3YxUzZnVGRSN1ZMU0loQXRHZVhZSEg2c2xhTjRQb01XWU8zMjBja290RGZXMTJtenZkUFlpWk8yQ2x3a1RsdWpjV1dsWTJzK3lyc2hQRXVIZ0JZZGw0KzdYcFQ3eDlyek1ZL3o1VXdEY2Z2Ylp6WEdmM3BHMXE5ZmVlTXNKUnJMQ2s0RHJZa2lDWm04Q3cxRFVFdzBhaHV3c1NIdlhjVEZCZVBGRGFLbXhKUmJZRHE0L0grN0QyZitLc1RTSWhvUkFBWWFIWHFoeDJkTG45Mkw2dTBQT0d2OXpTbnh1d0hIVkVXTkptWnBjQUI4emhub3VtSUFwam5nMGhJZkU2eHVLWk9HYk9qZnhkNktyck5UcUlBZUlGYlRhMjBjSDdxakZUSjdQcFVoUUxienNKQ2F0aEVBM29qTTNkODE1Mno1dVBEbllDR0FkOEM3aG5WNWNZRUl1RFdhRVBrcDB4NzNUaVdERVViMXpzc3g2RzVxZGp4WVVERGEzcHRNZ0NSc2ZWaVd6Q2VuS1lvOXNpTEVhT21JRTRPOThhek8rWEpraElveWxhdkluMWc0OHB6ZEt5TE1jVDZlc0hjdWl0blk0bDJ1YUh1clBWNlVISzVQMlJCUTZmaWpvZXN5R0dVTUg4VDFvT1MzWlFvMDVyaW9UNEZRM0RnSzNDRUZuM1JGOXNPUmI3TmpUT3kwL1JpbXhNNEdrMnZuNnh2elNsTXNoWTJIK05VK2tOUmtNRUFCdzVzS2UxdXkxM3FEdG52MUt6bG1abjAvcFB5MVc1S3FzWEJyUVd5T1RSNWs0ZEhGdzhOM2hOZDRjQS9Cand1cDVDdXhKVHJVU0FWTHBpTStkQ3E4WGhBNUtRdW5HY2Y2MG84S3R6UWwwdkVRdU1lZWxyRCtxT2hOUzBMN3dHeHo2M0NsdFNrYTNHNnVQYlBSSVNGL0szY0duTDJ2c3NaUGZjZFAwMU9RQkZHd0N1clE0TktKSHFKTWNTckJTRThMUEJtMDFDaUFEV2dISUJXUVVzSjBrMHI1S1FKakJUcHgxTlFremNMcFRTRmNlMlc4a1JQWHZ5YUFkUUZMdDZ1a1MvV05oSFFuUlRLZzJ3cmtuOStRM2JEQkpDWkhhOWtpN1lYZlRqazJTblhTVWhLMkYrdit4Z0VrSWdFSkZRU2tteVUwS0pWSHN2NXJvQlB3YmNWVWp2U1JHNmlSbVdJQkU4NUZ0RFFoaFFIdUJWa0JqeWluWGFWUkxTREJiN05qVE8yMDlDQWt5QVFhd0ZPVmxvV0szZGxiRmVBQkJkblIzMmRlM1diZmtVSHdDUkVMVCtCZWVyRmZLM2x3MG1JMTZWSHg4SkRKVUdhVXVRVGF5RlRUeHdZRmZoY0U5WGgyMzM1WjE4MnBIdGxoQzIxaXpOQW1OelZqQUFzZmtrSlBpT3c0UGkzdVFxQ1ZrSnE0L3ZGQkxpMzNyaC8wZmFRbTkvQyswdHRMVEE3cEdUcldTM1owZ0l3YXpOakdPT1Q3TEU1bzZFY05BSnZudXQ0MjZ2a3BEbE1GT25uVXBDNG5kYnNGbThuckc0c3pzbjloVUtlZHZ1VDN1OW1pd2JSTUtZR2I4aGdXSUVNVnZVbXVSbkxjWkEwOU94a3ZXTDNlaGs3SGQxT3RaeW1OOTFPMjQ2MWxLTWlHek5MRzJMOGpuSDd1MnczSXpvYjhzT01uTW1mQklRUGVSYlEwS2lyN2xCd0h5VmhGejVKQ1NzR0xNR1dWcmJHVkhReFp3OWtMZjJNeWpqVjJwVDEzNWNsWjkwSWMyc2hTQWhHT3owcDZyZFlxQmdIeEdFSE14bVZ3S0ludkQ0WjYxMk44SVNacEZqLyt0aUJHZ0Zka3ZnNHJSeEF5YVJoS3ZUc1ZhRDFjZDN6SFNzQ0F0ZlZLNlpuZjYyVEorZFM0bE9JaVJmcDdwVkpNUm50eXlyNE9vQ3dpbFova0ZYU1VnekdIWThDWWsvczhRUU1PR3ozZXBZblhacjJ1b1RSRWtGM0RJUzR0OUlMUUZaOVRQeUNKVnZXUkxpZDFyNDN4Y09PalFtVzRYNUxkcGl6TFNmazlWWklqdUJoTENQRVZnQUpMSXB5dHY5aGRReGdFVzhlZUZEam9pRU5OdEJwcDB4Qll2TVhSMHNldm9nL0hlQXhIejdzbXRDZ3AzaVNDUWkxNkFqNDdLcFdNSmJ4THpBbG1GQk5DUDh2cVVFQ2FtVnJWb1QwZ2p6TDZnQkZpbEJHZHZzZEo5Y2ROUW95dGdwd2l5aEY2YWdaOGNBSjc0ekFvY05EZ3ovNW1PY2lFQmllcmxGbUIvR2VGWG84anlnTnZTRjVoc3U1Tzh0YmhIYUQvV2s3N1NCSUJCRitMcDM4djhPWXY5R21ZKzZXQ05OYnFUZEhQM0NRUUFZZXprZWdFVGN4OHdRclgzSXZPVmo0SVVwd0xLU01kcFBtaENNRmRZSzl0NmJRZm11bUVWYnVWL012Vzk0VXpZQjh4OWFBSXBaMnh3Y0VKaHpRczEyRTlqa05TRTFpbFlUUEp0elk5Y0NRTGsycEE3ZUNVZzNla29Tc3BWWTdaTzE5VkVnNEQrWTJUYVEwN0xrbUoxRVFrdzFBczlCMmphLytvRmpVSWt0SXlISmNrSzJTOGxPVzlLQlZncWlZd0QxbjdidFVNaG1UZjRtWW96NnJpbzRjcWVRa0pxSHh3NmdnSEFFVGR3cUVoTHJvcFV0b0k5cDdlOEpVeTgrV0dwaU54ZmJFZDdmRDExVzJDRTFqdmxuQktEQllsNHFMSG1Ec1ZxUFo5ZWVnTkFGSSthU1l4WGx3RjB2ZGNIaHJrMm83NkRxdWVBdzlhSlZvaEtNeGk4REZFSWtodTJXWTh1YmpRV0o4dmhudmU5MkdoYjJQeEI2dmFUTFRQN2NDQ3h5d2ViS3pJQUFjL2ltSE1RWVhtRE9Bb082NUdscGlNVm5QeFBNbXhYclkrYXB0Y3ptUkptMlJGbjF4akJyWlNkZ0ZLdHZjSk92RkF4QVhRTFh5RTF2SkdicUJOaWd3RHRIeWtaQW1HOEttSEdpd2tUTFlINWFJaXcxZHNnU3pIK1BXY3JmSWRWVUN5Q0VuWVhFc1VsbDJBbFlyV1ZwbER6ZmFSaUkvRTJoTWtCeUUvc3RlWWhOWFFBYlFXY3lBSW8ySWdKSGFwa01IeU5yVng4amtPKzdBKzlzS3JFVUN4d0FXU21RazB2RTBZMHF2ZE9rbmpWczlQMU93WmlONXlFbkM4cTBtSWVvTHRuYVZORUFtNDNIR1NiV1k0NGxwQ21JMmVLYjVnS0lLV045TEpqTjdFOGs4QjF1UFN3cEhQdTVOVzVnSTdBbE1SWHZqTGRsTG9jQkFFaUFuSll2UWIwQUFDQUFTVVJCVkJaUXBnQ0dUK2kyUU5oczZLMEJRR2xVaE5Mc21vcnVFRUozVmJaTy9CMW10Mk1Pbm1iTW41bHhmeWd1elhuSFhjV3ppWG9GUHphZGhLQW13SXd4cDZza1pOTXdBTEVZaXNEeG1UVFlYQS9Dek5vUDZiU24yQlZ6VlRXaTJkKzlITEdGYVFFSnFYWEJRV0RiRUl2V2hpNXh3VnpIQlFmYUhyZzAvMmM5MTdIZGhLTWVWdXVLNDI1dnAySUEvSnZsdDZGbU92L214WjV4REhMQjFaTjJXZXBaQUJKK1VJZ3RKU0hCcVZSVDBsVVNzcGxZcUlUcys2ekFBdGF4WGhzc0lkMG13SjFjbEpOaVpFRytxQm1sRUVha0UxdEdRc2dDckZTc3BPMG5GODFpTzRsY3JJcUVtTDhBWnQ4NGJDMERJSUtjcWFoWk1iS2d6aEc0NGxkMmExODVwTFZSdkV3ZUl0OE55T0NGbkZlRzlidXloWUIwQVpUdGdGWWFXN0VjaUFpQ0lUUjducmJjUmZkc2F1K0lHSjB2andnaTE0Um9zVGhzcTBqSTBrcjZuMWRKeUthUmtDQm1UNlZCNlp5NXc3Rm1icGEzMEF3dEJOa01RR2xkS1ZWZDF4NnJXSk9DbFFzV0dpUkNFcklsSXlGaEFmSFNLTmxac1ViVUl3TUFvaDJ0L2ZQaUQwU2lBN1JlR2dmVmxMY1dFckxob3hSUjRCd2pEWkhpUkhXUEl2SGxibnpkYXdDQS80S2cwT0FFOE9iRm5sb1FiRTlqdWxqbDBjVnlSZHBqVnRlOGttNkp5SkhDdHUzUUMyOFZDVmtpL2xXWElTRzFjVXhZRjYwQUxjRkt3cnhnMFFJc0IyVFpZUC8xcmtZL044N0ZyNWVFSkJXQ3pNTVVQTkQrRzVCWUtiTjlIUmprdHdsMktxWmdRRzNZMGhRSkFRRGZNR3pXUUFqSGZnUWhYa1ZoY214Um5pdVZ5OW9lVy9UYytiSTdVaEIyS2V0UUoydVNBbXlIczJHV09NdEFMUnRoTVFzWXMreDFzYnBWVGxxV3hGVmkxaVp3SmN6YXZQUWFBSmNXd09WNWNHa0dlbjRNd21rQlduc2c4bDNtVFV5MkEwZ0pGcUtoRXE3V0N0YXoxRUI5Sld1b2VFR3ptYzJzSU1zeUQ3NVdRTFVJWFp3RHo3ME1hQVZLNTRHMlBsaUZMcENWUWhBNjFXdlBpdGNOOVk0MlJmbWl5ekFBMHBwWkNvSmRWVHc1T2xlNU1IUnBUdHFuejV5di9NTjcrbjU0dlVNM1pETjhURE5MSWhKZ2lFMnQxUnBGYTIybVk3R08zRkp4R3U1alg0Wjc4aUdveTJmQnBYbmZMREJnV2JCM1hRdjcrdGZCdWZtZHNQZStPckl5QURUN2J4RGZKZ2tOajlFa1k2M0xjNUFYVHNBNzlTRGt1Y2Zoalo0RmFRMW8zekk2YVRoSDdrVHFwcmZCMm5zTHFPT2FNTFRaSkVPMlpqR2hQd0dBWUJJdVN6ZWpTUXlmeHNCSndOK2lkM1NoT3J5L3R6RE5JQ2pOMnJiQzkyV0ZxWmlnc05yNGFpbm11K0JnZUR2dWdtdXdaU3Zld0VJUitaYUJCTGc4QjNYNUZOeW4vd0hlYzk4RFYwdGc1UUVwSjJHaDFkVEwwSXZmZ2J6NFBISS85UjhnK200MGxpUW9yMDZzbExqZU1sakRrWVptTVE1U0lBeVFnQnA5RWQ3VDM0UTg4eWpVeEhtd3JJTElBbGtDc0V6L2dobnU2VWNoTDUrRmMrUnVwRjcxRGxqWDNHU0tRMUJzNCtzbVhmZFNGN3lXV0xnUkZqeGNEQUNXYmFPMEFGdnk3QmdOakFPK0FsNVdMU05nTmMxZUZSQ3AySHU2dG9xRUxKVkdiaVZ3OTlEU0tOK1B2ZzN2dWU5QnowLzRTenRGb240TUFOS0RYcGlFTGs2aCtzVGZJZjI2RDhIYWRiMlpoeGlyLzNhUWtFUWZ5akxjcDc4QitmejlVSk1YQWE4S0NCc2t6SkxMaExXc0xFS1hpL0RFZzRDd0lkcjZ6WUtrTU1hcC8yREZyeHR5bmhvWHZORWt4QThUdEcyUkk3V3VRS3ZaeXhVeEMvakpud3ZPN2xHaHZFbnRWYVN3YktFWk9ySndOV21ZR09Hb2oxRVlGQzlKdzlSZzlXVnAzSkw0bGhra0JMZzRhZHpUeWZ1aFppNkRVbG1ZVGI2Q3VzUlMzY0kyYjFhWEV1NHozNEc4OEJTNE9CbVdod2JYYWtacXJVdzg5ZEVVRm1pQmNxRm5Yb2IzMURlZ3hzNEMwZ05TR1grYXZWL0Z5R1NaZUZaWVVHUG40TDd3SU9Ud3MxSFl3Y25yMUY0M0FvS1BXR0MrS2NKZ1FGc0VwNnBwMXBOcWFtSjZ0Z1Q0Q3ZqUzJOdzBTM2ZDVTF4TTJTSUhDb2JsSWhKU1kxUTNkaVFrSWN1blNZSnJ5WXZQUXA1L0FucDZHRmF1SGNRcVhGZ1QxQ09xbzhHRmt3RVhaK0NkZWdEcThndCtxVG94dlg5YlJrS0l3T1Y1eURPUHdodCswYncvMlhZUXZRYzVha21vUkVvWmxzOE1uaHVGZk9aYnZqSWJiUTJzM3JJaklRMHM0R1lJTTJzSWdmbXl2RGkvVUI1NThNUUxrUUkrOU9USjR1UkMrY3hVV1o0Q0VaVFNXenNpa3F4bzNSc09tQWRjQ0J0YVZpQXZQZ2sxZFFHQUFOaVk3S2I2a0FUVTBETlFsMThDZTJWQTJQNENwKzBSRWdKZ0JUMDNDdmZwcjRFeU9lTnNBL2NwbGpGTnJFMGVyN0lJOS9rSGdXb1J3WEJyb3o1Y1VzUTY2OStjRUNDRTFwVWlabE9kejUzUDdyc1lmQlBTdi9ITTRPaWkzWGFHeXd0aHpHR3N5YzRZQ1RHdXhiOWlaUUU4UHc1VXl5RExBa01sdkdoUWo5cnJNR0FVamhWNGNScVlIL08vMVEydXVUSzJFYU1VMEJwY1dZU2FlTm1FQ3N2cFhHZzFhM0RwZ2hjbXpJYnZzYm90UjVJYXVlQ05IZ2t4cWlSc1ZFdVFYdlhGQ3dzWUNiNEtGZkNTbHgxMU5WNWl0d0lTUWdSMGRkT25ZOVd2N2ZKUHNQVEFiaG5RSGtBV2lKTjFqRnl3L3o5MHkvNjN6R0JaQWJzbGc4WERneldRa05yUDFXSmdCaXNQWEo1SDhNSnVvRDRKaXl0VVZDRy8vbDRwWWMwYlhUY1Vyd0oyRjQzTGorRWJQaElDOC9aMHlWVEprQm82UDZlV3ZpLzQyWkdGY2VHVnp5aG1OOXlvSEZ0QVFwaU5SZElxUVptWEhhM2c0RHovdWpWbGNsTDlFbGlvM0p4c3dWcGwzU1FrYWxCVW43VlVxNTdoYVVSQ2ZMTENYaGxjV2ZBekIydTRaaE1TOWo1cnNZak1jTjZ4Umg1NmFhSVVmQjhxNERkUFRzejJ0V1V1bHUyV1VjRUtmbWk2dVNTRUNHQUZTQmNzeXdEWlVXcGdPUXRvMldZMWw3OHZESEZrOFlBYTYxZURnZG5FV01IT1dsRXZOYnp1VnBBUXNsS2diTjVQTmpmT0F0UVh2MTFPM2hDVEZhNGJpdklBNWZyNnVJblJJQU5RRXVmZDdNUGp1bVg2OVBCRXVJTlNxSUNqa3pQNnhBU1BQRHFxUDYrVjh0bThtYTY5YVNFNmtYRVpzZ0tVNWt4dHFKRmxJakNadW9oOE4wVHZkYUJjZXpqbTJ6UUpZUTIyYkZDK0c2S3R6d2Y5bUhjYmhCbUE1VUMwOThFNTlFWm90eFNHdXlzUkNRclNMcllOcTdNUDFMbkhqQk9iTDFlK3VQOFFiaVlGQzlxaEFYejFSeE4vK3RWbnhvZmozNGNLU0VUaXpJeWNQak9qdmh0WUtpQ3lkSnRKUXRnZmRDZjQrb2NHa3hFWVpxeVVDRmJQdFJDRmJoUEFnNWNsSWN3Y1lwQWVSSHNmUkZzL2tDNFkxeC8xd1pKTGJqb0o4VitOUytrQ3JEMjNnS0FSdkt6QTlFMTlDMmJhWkI1Z1NtVmhYLys2U09uOEVLUGVkY055bElJdUw0QkxjekRiZWF3OUZWVVAwd3cvbWV6ZkJhMHc1OUhRbkVlVitQRWlkcUorYXR5clBEWHVuWGFsTERLemppdlpwcENRNEFhNEZYQnBOb29rRzZSaUFqTEJSQkQ5TjhJYVBBTFJ2Z3ZzVmtEK3YzZzlFdEVyTXlBOWtKTkdhdjlySVBvT0dFWmMwM25iUWtJQUlKT0h0ZThZcklFYlRVd21aVjByUmtGYmlJd0x0V3lJemtHelcxalFmN0Y2Tmg1NTBXQzNESzRVZmVLejhTUkVNMHZOMEo3Ry9OaDg1ZUVmVHFlS1A1eE9KUXh1d2dMK1lMZ3FmekJjblowdHVTY1VvOGlBMXN4eTAwZ0lDYkNXNE1vQzlOeG8wRE5veEFCTlBRV1lHVmJYWHFTdXV3MnBBNjhCcFJ5d1ZtQTIxaU1SMGdlRWc4MXlWSHYzSzVDNjhRMndldmFINWEwdTNxcXR6enBKU0pBS1NXVmc3N29PcVZmK1M0ajJYV2JMZUg4RHBrQ1JRa3NlVXlyUk1RQjcvekZZZTQ0R3BTKzVUcUsrNWdzemJhMjZDRjBwTnVldVZ5ME16WkNhV1h0S2pUOCt2UENWTStjdnlEUG5MOVJYUUdiV2w4Zkg5ZVh4Y2YxM0x5ejhGNC9Gc0daSXBkbE5ObXNqU1lnd3JxQ3lBRFU3RmkrcWNmeERKbzBDeTRGOTNXMXdidnRYU08xOWhVa25lRlZBS2JEV1lNMlJVa29YckQxUUpvdjBXMzdaekNESnRvV1dKSDZUdHBxRXhOTXVUQmFjTi80aTdJTnZBQlU2d2RWRlFDcWppTUYvcFFDbG9OMFNLRmRBNnRBYjRSejdPVkN1SXlJU1FhaFQ3N3JtNHVCcUNYcGhHcnc0QjJ6S2JDRFNFQmFncENhdk12M040dDV2MVR1cTdvc0o3MS9zUC82THN5T1R5TGNmc0xKdERpdFBRMnpDb2dHeUFGV0ZucCtBdlBnTTlPM3dXU29hY29Kd09wWldnTk1DYS85dHlGMXpFOFNEZnc3dnhlUGdtY3NnNWNKME5Sa1gxYllMOXI2amNJNjlDL2JlWTJBbGZZdElZWG5iSlVaQnlQUUZLMWo1SG1UZitXbWtEdDBGNzVsdndUdjdPRkJlQUxNaGh1YkZqamFjQTY5QitqWHZnYjM3VlVCTFp5eXViSTdRNm9tWHdMTXZnNlVIRWpaNFRleTdzU2l0cGUya01yTkZlZnJ5NWNrSEh6eFp2Rmp2dUZBQmlVZ3dzeVlpY2RmUkc0dERYdjdCUG5hNjIxZ2QxQVFwQUNjMDM2aUpEUk5ZODlPeENHeWVQcTNCYzZOQWRSRmtwLzMwQ0FNMTdpVG9aR2FPamlFQnBQTkkzL1orcEE2K0NYcDJCRndjOTJlU1dLRFdYb2kyZnZPLzBHM21Bdm96Wm9Da250Y0c2czFneTQwME5JTWx5aWJMUEJpV0RYdlBVVmlkdStFY2V3LzB5OCtCWmRVY2ttNEJ0ZmJENnJrV1ZPZ0IwaTFSejhlVXIvNDEyRjhJWmtOUG5BZlBqL2w5bU95SXRjVEN0UmdSQ1NnSkYvYVpseW90UHdCVTBIN0JzY1Z2ZHV4RUhmdlMvY0w3cm4rb1M2ckRMS3Mza0owV2dJNWIrS1NCQ2x5WjMwaG0zeFhIMmxVWEN6dGRRVStlaDU0NEI5RjlMY2pKQlNja1hOM1NEdlhkcHlDSXp0MFFiWDNnM3YzZ2lyOVpOeEVvMndaSzUwM2VrTWhYd0VocDF0UEo4ZDlyWGZKYXNLQnpDUVRrMmtIWk5vaXVmZUMyUHJEMlRIdHRCNVJyQjlLRlJKMVF4L0lsSHh3L1QwVUNxTXhEanI0RVBUY1dHcEI2ekQ1UmZCTllZTTBaZ0JDV2NOM0tQR3Q1YXFpU2VXWnNhbGo3eHlSaXdJUUZERDZaV1gvN2N2cVpWN2ZPbnF4YTF0MVpKOU5wVG1ORWFoYTJPL3lac0lETnJBbmh3QUl5OU93bzVPbmpTR1VLb0k0QmdLeUdjZUNTbXhiOGJxVkFMWjJnbHM0bDV3UmRRMEkwamkvWElCdHg0NUpZckcxa1FnanEycnRzbG5LbGg4YU0vUGk0WlVHKy9EelV5Q25vNGt6NGVveU5FWXFJSDdGWUtMdm5xaFh2MlMrY0xBLy9kb016RWlRaytBOEE5MzcvdWNrRmoxNmNjYTNUU1hYYlFCSVNuRVVBSzQzS1AvOFB5TXVub2F0bHNNOTJWeUlJSVI2elNJWU5LLzkvL0lGYlNnVHFsclVLYkVOR1FwYkI0bTBDQXFiZjZKamx5eU0vL25GLytCWG9rUmNCcnd6eU53VFlFREU1SWdDazJhdmlVc24rN3ZHcHpOUG5SbWNhdmp0aTJlajdjeSs0OTQxWCtNL2hWY0VNQ2QrRmFzWUdacytOYlJLcERQVGtSYmdQZlE3eTlNTWdtSzE0ZFJOVHBlSWt3c1FmQWtMWUVNS09zVXpnU25rWFkrMkVBeUtDRUJZQUN5Sm1zWmF6WEVrUFlSTGJlbjRNNVljL2g4b1AvdzY2V3ZKbmhLL2ZHd1E2QWZiZlNzMHNKS08wdTREdmZPYkUzSFBMblp2SUE4WS9mWFJXcU9ySmk5T2xoOG15YkVZMFV4b3hHeFluSWFzWkNVbU9YakRJeVVLTm5vRjgvbnVRcHgrT3lsL0dGVzgzdHU2UmtFM0N3dm9CQUFub21XSElGeDZBKytqL0FEazVmeDVpWTR1N0dpejRTak5yeVpCc1dYaHFaUEdlVStQbElkUnN2NXJVcnhvWFhNdFFQdmZZcUR2djhzV0xSZjFGcmk0R0Z3eG5TMU4wY3ZqM2FrWkNmSjRSblVzQ1hDMUJYbndHM3NrSG9HZEhscmo1Mmc3WUNDS3hIbXk1RVk3dHhnQy8xOXdTMVBCejhFNDlDRDF4eWN3NVhDYXFYTXVEeVA3SUZqTjBwVnlhZjJ5ay9QV25SOHZqTHd4UEp4U3dsb1NzWUFHQnZ4cnRtL3lyMGI2dmwwcWxZZGJhTlVHeVVjSzROUXdhdTVxUmtLV1lJU1Y2OWpMa3VTZWdMcHhZZmtid0RwQjFqNFJzRWdZZ3pFN28yWmNoaDA1QUR2Mm9icDNYTCt6ckJLQzFMazNQRnAvNDIrSHN5YjhaenBaV09yTWhDUW5rcXc4LzVYNzE0YWZHSDU5SmY4bGxNUW1Uc3BUQStrbElMY2FhelJSenJhQm1SdUErOTArbWJBb296L3JkeFVaam0wMUMxa2RnelBwbmVmNUp5QXMvZ2w2WWdyQU42YWlyc0dzVTF2NjJ1MXJDazk3dzM3NVUrY05uejQyNHo1NGJXVEdBYnpvcS8rUG42QjR4ZTNrSTFVVmJXSllqbFJtaTIwZ1JCSUExaUN4QVMrakxMMEFYcC8xcDV0d3dGcndxZFNUV1YycG0xS1JjV0cvS3NCc1RTV0p0TDNpNE9GNng3L3Z0SDh6OVk3UG5MdXVDaVVnRWZ6TlFmRzR4OThWWmFSOW5KVFZJNklEOWNEMFgzQ3dKcWNXQWtNNnpXMTMyN1k5Tnh5cnJPWGNua0JBQVlHNzZYQUJtcFI5WlpyOGNyd3pTMHV3cnMyeXl1bm1NMmV3cXdjRzF0SUx5dkVkT3pzaXZ4UHBtaWJiWFlvMUdRa0lzK1AzNDgwUHkvL3FwL2ZmM0Z1UjFqdUQ5MlZ4THIyYWxDU3lNSncxUzBxc1lDYW1IQlJsR1JpMkJxdHNwVFJFRUxjMkVCT2taZDg3UlhnOGNxOHlhTUQvT0NqNFRTZVJtTUFCbWw2cG9lRERNa0pJRnRtMGdlUDFXamR1bldEbHhEUEgrSkRLenBJTnIxK2pXYWg4NlAyb0tpMUdhcGJBc01WUFZqMDJYNUFQZlBJK1RId3E3YXVrTnJNVWFqb1RFOGVEdi8zeDg3Tnl4dDJjZnNwRzlvU1hINzlJTUhSQ0pZT28rcjJJa3BDNkdHTDFaWjR3U0tEWXZURUpObm9lYUhVUDhYV283UVpnWmxITE1YbjErZkdZbXBBcUlUQUdpZXk5RXJzTmdxQiszMVkzbDJJUXNaUGx2b3ZMWEVKdk9YbWVkL1o5K1drNXJLZVZJVVgvajFFVDFrWHNmSDV0ZlRWa0pDMWozWWpGOGJLNkVlMTdzZWZnM2o5a1p5T3E3aEpuK3JRa3NLTlNpbUFXTXBWbWF4bUpqTE5FbVFvMTdiRmtyNk5kSlhUaUJ5ZysrQU8vRlI4THRPSXp1MTloZXBsVmo0VmZ4VHpTUE1XdFFOZytSYndlbFc0enhseDRvNWNEcXV4SHBPLzROS051T3FKT1dUb1FJMnB6QWlNd2tEMmFBQkpqSlhDdDh4ZnJhaElLaUdacEJzRzNiR1JzYlA1M1hmTjhmUEZFKy9VdXJMSy91ZEt6bDVCc25ob3IzdkQ1My9BSGcvUjk5MHcxZjBkS1QwTkJFUmdtRi8wYnN0VXZncGdSRXRnV3dVOERTVUtJcEVUQTNXSmZuREpsSjVTQXMzd0lTUlM5Y0RDKzlCbXdkVnBxMXY1UkFlbERUbzJETkVCYjVDcGdHbkR6Zytwa005alYzTlpmenU4MHFkTUxLdDRHblV1dGVoSzhabXBuOTkwbHJxTklNZnUrRmxuY3o4L0Nac2RGVnY2NjlhUkpTYzl3c2dBY3ZYWjQ0THFVc3dqd1JFb0FJbXNkckpTRkVBRFJJa05sc0o1V0pGTERtWmpmbGpvZ0FFaVlBSjRUWEFTTFN0QjRzTHFzTzZJUFRpVUNXQldIYlp2S0I1WC82c1p1eDV0RzV6WStFK0ZnNkJ6alp1Z3k0S2NLQmdIUUFNRnZwU3RaS1Z6MDU4c3g4NW8rWWVSaEVTN0lpRzBwQ2FvNlR6RHorbmZkMC9GbG5JZmNKUWVLd0phSUZGdXk3Sm83ZG91WkpDTUtublN3blp2Mlc1Z0diSGJrSTg0aWNuQVNSRFBuWGlpMWx4TWxMTjhhUzM4V1VMSnl2U0g2MWt3cTdFZ21KRkloREZ4eVd0NHI2aGNMUm5XU0dKaUpSY2RYa1FxbjgyS2xpeDcxZit1ZG42eWFjbXlFaEs0NkUxTlBpUUg3cnViYS9MN3JxZnFuMU1CSHNJQnNlMm9kYWE5Zk02SWk1YW5EeFJwZGVWaEpKMmVERHQ3WkpLMFpZYXRsV2gyMjRoQ3cyMExaQUlTS20xdlJJaU4rM3hPdk5vUWJVMENjZVd1dXlLMDllbmlsKzg1Zi81dGtUNnloNDVaR1FSdVFFQUI0OU5WVDZ2VWRtL25UUjFmL0lXa01DTGhoeEN4cmV0cVpIUjh5WnB0Rk54SDcxWEVnQ0Q2cFBrUVVNckNEVnFOWmFzQTJYZ01nRmRRNHRJTWNPYVdJa0pDU0VmcndHc2ZiSHhTZk9TblBGc2xOMmViRTQ3VlhLMy96RWlkeVgxbHBrSU90T2kzLzVtZG5ocnp3ejhaa1RJOFgvbUlMS2VLQ1MxcEJydmpWK0NvSzFoSjY2YUpac2NyUTZySm5wV1lBL2xRc21GdVhGV2ZETTJKSmxtRHRYQktBVjJLMkFLNHNHQ2puUENtb1VjOWZCbW1kZW5JTXV6NXM4NkNwdXVXWm96UXpOckRXVHBGUUdhbjRNRnhieGE3OTNmdGYvODZPekkrc2VEVnNyQ1VrSzQyS3A2dDMzM09YaVgxaUVuTm1yQlJvZy8wV2d6Wk1RTUp0Z1dVbkk4UXRRc3krYkhlTDl4ZXRBckk4YjNBd0dvSlUwVC96Y1plajVjYkJiOXE4VDJaSnRKeUdOTUNITXJxN0ZLY2p4OHlaMENKYWMxaVRhNHpGZjJMN0FHbG9wcy9IbDlFWG94V2svMmIxOFhXb0pSM0FDRVNCWVprNk1lUjkvZWQ1OUZPQmkvTHhtQ0VjOWJObnBXTTI2NUU5L2Y3WTBWM1pQRDAyWC9tcGlvZnFvMHFvWU5BWkE1RzY1aWNYcThhNlFIdVFMRDVnRlMwb2kySDQzUGlKUU40ajJBMjhDSUMrY2dCcDd5VCsvaGtVajZWN1hndFYwN3RLNnJIYWtJVWkzQU9EU1BPUzV4ODFXY3F3UjNMdkVkS3NHdjVzb2tpRFBQUVoxK1VXZ1BPOXZUYmZ5MjlIRDlzVytrMHBQWDU0cmYrMitJZmZySjRhTEkxOSs0Sm1FOVd1R2NOVERWalVTc3B6OCtxTjZIdURqbjNYbXYzekw3dFlQQzhjK2JGc2lFL0ZjMDZ4bVJrZkNKOXAyNEQzN1hZaDhKK3c5UjBGdHU0QnNLMGlrbG8rK1dJTmtCV3JxRXJ3WEhqSmIzZ0l4MWZFUHcxS0ZYQzIyQ1RURWlMQUFyd0oxNFNuSXN6K0VOWEFJS1BTQVVoa1FpV2hYMTJCMEErYkJZMlpBdWVEcUluaHhHdTVUWDRjYVB3dDJLMmFtRWV1NlNzZmhqK2dYTm1PTmtFcFBMMVRrRTk4N1BmMW5mL0Q0d3RCR05wTWFCZkYxRDQ0dDNReVVzaGJiM2Rkci8vMWJyWHU2VzdQdmFzMDUrelJacnNXY0NWSlp0U21YZWxoNFBSQzBWNExWdlFmMmRhOUI2c1kzd2o3d1dvaDhiK0pwWHpMMlcxMkVuamlMeXJmL1Q4aEx6NE1yUmJQWGNySXhTNW5oV3JCMURoZldrOUFLc3RtNGlYWmRqOHhyM3d2N3hqZkE2dDRmdnRneHJFZThQdjV1cStyU2oxQjk5cnVRei81VCtIb0g4ejNxenJFTVhHL3dsMlpJSnBLQ1ZlYnlYUFhyRDV5WitiTmYvZDVzM2NYbDY1RU5WMEFBT0hMOXRjNFhiMXY0U0dzMjlZbk85dFlEU3RnVkMzQ2ltSUlSWC9uYlVDa1owRUlBMGl3MEo5c0JaUXV3KzIrQTZOa0RrV3YzaVlVQ2hHMVcrMDhOUTQyZmg1NGVnUzR2QUhiS253VmlYSDdZOXp0WUFZSG9ZU0t5ekdhY3RnMWtXMkYxOU1IdVB3RFJNV2ppNXpCbEJjakxaeUFuTG9BWEpzMTJKOVV5aEpNSkN2VExxMTlmYlNZWkN6K3cwQnB3aFZhWlU2TnpmejB5Vy83OGU3OHhlLzltdExQdXd2UzRjdm1ka1hESnRZVXNJU3FBbkhMRnQ4am1DdWJtZjZPanZlMEFRK2h3YXBFZlBTMjdnSjBEeDYzTnlBRDg0THE4QURuOFBEQjYxdC9PTnFiQ3JNR3lDdllxWmlNaTIwa29peG1IajF4bnJVdGVDeGEvbmMwbXhwdE9vQU1BSzdOaE9ZeGxWeE1Yb2VjbVROdVNWemVzV2ZwVDJGaWJZNUsrZFdueHdTaEtwSHdBc3hEUW1WT2pjMys5VUpWL1dWVjRPbjVPdmJCc3JSalZ1TEpsNDcxbUxTQUEzSExvZ1AwSHI1d2Y3RTdyZDdUbTg1L0k1OUlEbG1WbGdDQ0FSNHlTY1gwTEdIUmRMTjRKQ0V0NDhKSktCcitJa0JVdWplS3c0eTBnZ01RMXdsd2c4M0w2NUxlZlRMM0lueXdCanZCRThYNHZVOUxJZUVwUFR4U3JqNXdhbWZuVHFzS0pUejV1elk2TVQyM0tOb0lVbVhwS01PTHdnQldVclpFQ0FzRGg2L1lJZ095L3VHM3g5M1oxdGQyZFRhZjJXMExrd0lBbEVPeWttT2lXZ0ppZzVyNXZsTDVzTkxhWityZFpFdWdrUjM5Qk1Va2krSVREZStMYkwweCs1dDl0UXN4WEs1c1NBOWJLUUcrWC9ablhpMTg2Mk4vNjh6MkY5SzFLVTlFQzU0UUlRb0RsNDBMLzR0dXZiZld3SzFBRGF3bUgwdXdpbGRhQ1plYnlYT1ZyMzN0eCtzOCsvcjNwcHFmVnIwZTJSQUVCWUZkM2gvamRWK08xMS9lMGZQQlYxN1Qrc29Lb0NOWU9VZWlLdGZCblYxOVZ3TTJWZ0hDd2ViMkt0dXlVcmViSGNXTE0vZmg5UTlXdi84SGp4YUd0cXN1R2pJUTBpd0U0T1ZPV24zOXllUDZUbHF4a2lDQVlKSlZtbDVrVG93M3gwWkdObkQ2MW82WmpiU0ZtUmplQ25TMFlpc25WSkxSbTZJWFptZEdUQzg0SHA3M1VQd0FZalorM252dTltZE94UkROWS9PK3h5UmtOWVBZM1gxczRSWVQ1L1IzcDNWbXY5RFk3NWV3UnRtTXphODMrWk5ZNGNZdHp6K2pXN3lRc1ZzTU5HQW5aVEF3QXRHWk5SR0N0Uk5WVmsyVlhudlRLN2pjL083VHJINW01ZU8vam94c3l3dEVzdHFra1pEbDUzMTJ2SHZpZHZVTWZiOG5uNzA1bGN2dHNRcXNnc28xTEJwYVNrKzMzdHZXd0s4VUQrOVpQTTBNVHMxMlZjbmh1c2Z6WTZIVHhteDgva2Z2U00rZldQN0ZnTGJKbE1XQTllZFYxMXppL2MyaitIUU50NlEvdjd5MzhsTWdVdEZKU0MwQUlRakpmdnhPMHJSNTJoV2lnMGl3MW9HMDc1YWpTREo2WnovN1J5UVhuM3QvKzd2bW5KK2VLbS9tbWhtVmxXeFV3a045OTk2dTdBVHIyc2Y3aGIxTkxKeFJaVWlrbEJSaVdFQTRTYzRnNEhyaGVWY0NZMUxKYlprZ05ra3dFSVlTdHBIU25wNmJQL0tkVCtmY3k4L0NYL3Zuc2lsdG5iTFpzS1FscGpORThHSTlkTE5MUG5Kc3FmMjZoVkRsbkV6dVdaV2NVc3pTSzdTZGlnWFdSaGg5bkVoSU9CNXV4WE0wQUxGWVpTMVl6Y3d1TEoxNmNLUDkreWVQL2hkZXhobU9qc1UwYkNWbUwvSXZEQTdsUHZJSnU2UytrNzJoTDA1MHRRdDJleXVWeUFtUURaalVXaGE0NStQbVRiUUdUb3huUU9rNEl0Y1NDaDR2YTh4NlpLc2tIbmg1M0gvblBqNWRPbngyZlgvWHF0YzJTYlNNaHk4bW43eDRjdUtXdCt0cFh0cm9meUhRTjNKS3hlSUNJSEFaQmhIbERycUVwUVgxL292UXZOakxIdmdMNkc0bHFYZktrTnp4V1NkMTNja1orNVp2bnZaUDNQbjV4Vll2R3QwSjJSQXhZVHc3dTdoRUE3RThlVGYvYnQvUjd2OXJTMG5LQTBpMWdwYlNmWWhCRXFMdG05eWRKQTAzY3h3QklzMmFRYllscXVUUTdOYnZ3eEZmUFZQLzR0NDdQYmZwdzJucGt4eXBnWE80K2VrUHJ1M3RuYjcycEovWCtWL1RsUGdJd3lFNURnNlJTU2dzQXdpd0wzWHF5c2dVS1dFc3VBTkpLYXhlQUVKWmxDN0NBNThMVktEMDFzbmpQWXlQbHIvL3R5OW1UejI1VGFtVTFzaW5Uc2VMbGJSQldBbkNpSWpFeXNzai83NnhMN3gzTUZPL0lwVk9EdHBQSmtHV2g2c21peGV3SWdpQWlPeDRkQmtON2lhVHhCbUZ4OWR2bzZWaTFtUC91TmNsRU91VTRPU2dGdDFxWlg2aDQ1eTZWN08vdXp1TTduc1lRQWVQdzkzQUVOdnhlYkNpMm8waklTdkw2ZzRPQ0FPZFhqdVp1UFpSZHZObHgwa2NzMnpyY1F1N0JWTXJPQzh1eFNaQWczeEwrdUZqQTRLMlRiTGJGMEt3OHZWQlZReTdzTTZ6a3FXcWw4dXp4NmV6VC8vWEp1ZWNBMXFkZW50NjJ2TjVxWlVlU2tJYVZqVjNqVFVmMjVONjVUeHk0SVZ1KzlZQ3pjRmRiWjlkQjJKbHUyN2E2YlVFNS8vaFFRZnhtYW9BVExEb1M5aFdyOXBvYnEzOGMvNUc0WHJqdG13NUhnOWdrZTlqM3daSXhMNlVhSjFtZVBqc3lkZitaU3NzL0QxVXl6M3p4NU9MdzJXVmVoYkNUNVlxSUFaZVRROWZ1RVVTdzd6N2NmL2hmMnFmZmUzQlg0UjFkaGV6TmdBWkVDbVFKYUpCV21pVnJsZ0phRUpGTmdKL2pOREVWMWtwcVZxbUJjZEpBQk1Gc0huZ3pUTVpTUTJqTElrY0FBcXdGUzJtMmRGRUtvL09WaHg4Ylh2akt0eGIzZnV2Qms4TVhBV0JzYXVhS3NYYjE1SXBYd0ZwNTFXQ0hmZWVlYkc5UHpycjVIZnZUbitpeHlvZXpGbmRibHVVZ2xRRXllV2dqRmEyMEpLMEJRYllBN0NoK1hJVlNMcU9BUVlyRVAxejd5dWZ2UUFHcFNiaXdMTnNpNFFpQ0l5d0JWSXJnYWdtZXBsSVI2ZUVoTjNmOHE4OU8vT21jUzBPUFRsbkZzME9YcmtoTDEwaXVGQkt5R3RFQXBrSDhHQmlmbksxeSt5Vk9EM2hXZW4vYXRnNjFUVjgrMkphMTl6bTIxWnF5blF3NTlSU2s2QUFBQWJoSlJFRlVXVEJyRUNBNGVEK3loZ2EwR1FsaWlFREpDQ3dZcE0wMDk4Qk5BZ3hvMzlFTEJ2bXZQQSs5cXdhYmFXZEVaSk1nSVFBYklKdWxtK0hTUEtUbVNrblIrSHpGRzU1TGRUNG4zZlNMYVZMbldod2VCZE0wZ0dFQUZmK2gyTFErdmtwQ1ZwQzFOUExWZTd2c054eloyNzYzVmZUdXpYb0QxeXllRzJqUFovZVFrK25SSXRXdUlWb3R3a0RHNHQ2MGhVNWJVQjdDMHY0ekpZenVrWUMvRVdkeVBiQVpoVWp1N3hXOVJ5WE93clhuYWczejl2Q3Fva2xYOGFTR0dMWmtlUjVhVG50U1RjMFh5eVBucy9zdVhsakF5UGs1TmZuUW1ZblM2VXNUUDFZV3IxYXVXQkt5VnV5YTdnNXgwdzM3Y252eWFPL2x1ZTZleXVYZTYzYTFIZTV2b2IzZFdiR3Z4Ykc3T1pVUkdpS2ptQjBZYTJWU2pZUjJSRzhwaTF2OXhMVTBZeDZBSm9Ja3dDV0NGTldpcTdTdUxMZ1lIUytwb2N1ejVmTXZpZjVUWTJnZEhTbGJzK1BUczZXSFRyeXc3Wk1EdGxwKzdHTEF0VWhQVjRkZGFHbEJhNkZndDVEcjVMejV6TDZjMnpmUWx1bHJkYXpPYklyeUtVR1pRejNwTzFXNDhWS3dMMHU4SkliU3FKeVpjWC9vS3UwV3EzcHlzcVFtWnlwcTlteHE3MGlwNnJxTDVZb3NsY3Q2Nk5MSWo3VmxhMWIrZndOWFNnT0hpMHhyQUFBQUFFbEZUa1N1UW1DQyI+PC9pbWFnZT4KPC9zdmc+Cg==" k="name"/>
        <prop v="0,0" k="offset"/>
        <prop v="3x:0,0,0,0,0,0" k="offset_map_unit_scale"/>
        <prop v="MM" k="offset_unit"/>
        <prop v="35,35,35,255" k="outline_color"/>
        <prop v="0" k="outline_width"/>
        <prop v="3x:0,0,0,0,0,0" k="outline_width_map_unit_scale"/>
        <prop v="MM" k="outline_width_unit"/>
        <prop v="diameter" k="scale_method"/>
        <prop v="40" k="size"/>
        <prop v="3x:0,0,0,0,0,0" k="size_map_unit_scale"/>
        <prop v="Pixel" k="size_unit"/>
        <prop v="1" k="vertical_anchor_point"/>
        <data_defined_properties>
          <Option type="Map">
            <Option value="" type="QString" name="name"/>
            <Option name="properties"/>
            <Option value="collection" type="QString" name="type"/>
          </Option>
        </data_defined_properties>
      </layer>
      <layer class="SimpleMarker" enabled="1" pass="0" locked="0">
        <prop v="0" k="angle"/>
        <prop v="33,150,243,255" k="color"/>
        <prop v="1" k="horizontal_anchor_point"/>
        <prop v="bevel" k="joinstyle"/>
        <prop v="circle" k="name"/>
        <prop v="0,0" k="offset"/>
        <prop v="3x:0,0,0,0,0,0" k="offset_map_unit_scale"/>
        <prop v="MM" k="offset_unit"/>
        <prop v="255,255,255,255" k="outline_color"/>
        <prop v="solid" k="outline_style"/>
        <prop v="0" k="outline_width"/>
        <prop v="3x:0,0,0,0,0,0" k="outline_width_map_unit_scale"/>
        <prop v="MM" k="outline_width_unit"/>
        <prop v="diameter" k="scale_method"/>
        <prop v="25" k="size"/>
        <prop v="3x:0,0,0,0,0,0" k="size_map_unit_scale"/>
        <prop v="Pixel" k="size_unit"/>
        <prop v="1" k="vertical_anchor_point"/>
        <data_defined_properties>
          <Option type="Map">
            <Option value="" type="QString" name="name"/>
            <Option name="properties"/>
            <Option value="collection" type="QString" name="type"/>
          </Option>
        </data_defined_properties>
      </layer>
      <layer class="FontMarker" enabled="1" pass="0" locked="0">
        <prop v="0" k="angle"/>
        <prop v="A" k="chr"/>
        <prop v="255,255,254,255" k="color"/>
        <prop v="Arial" k="font"/>
        <prop v="1" k="horizontal_anchor_point"/>
        <prop v="miter" k="joinstyle"/>
        <prop v="0,-0.40000000000000002" k="offset"/>
        <prop v="3x:0,0,0,0,0,0" k="offset_map_unit_scale"/>
        <prop v="MM" k="offset_unit"/>
        <prop v="255,255,255,255" k="outline_color"/>
        <prop v="0" k="outline_width"/>
        <prop v="3x:0,0,0,0,0,0" k="outline_width_map_unit_scale"/>
        <prop v="MM" k="outline_width_unit"/>
        <prop v="11.8" k="size"/>
        <prop v="3x:0,0,0,0,0,0" k="size_map_unit_scale"/>
        <prop v="Pixel" k="size_unit"/>
        <prop v="1" k="vertical_anchor_point"/>
        <data_defined_properties>
          <Option type="Map">
            <Option value="" type="QString" name="name"/>
            <Option type="Map" name="properties">
              <Option type="Map" name="char">
                <Option value="true" type="bool" name="active"/>
                <Option value="@cluster_size" type="QString" name="expression"/>
                <Option value="3" type="int" name="type"/>
              </Option>
            </Option>
            <Option value="collection" type="QString" name="type"/>
          </Option>
        </data_defined_properties>
      </layer>
    </symbol>
  </renderer-v2>
  <customproperties>
    <property value="fid" key="dualview/previewExpressions"/>
    <property value="0" key="embeddedWidgets/count"/>
    <property key="variableNames"/>
    <property key="variableValues"/>
  </customproperties>
  <blendMode>0</blendMode>
  <featureBlendMode>0</featureBlendMode>
  <layerOpacity>1</layerOpacity>
  <SingleCategoryDiagramRenderer attributeLegend="1" diagramType="Histogram">
    <DiagramCategory minimumSize="0" penColor="#000000" scaleDependency="Area" penAlpha="255" height="15" scaleBasedVisibility="0" width="15" barWidth="5" minScaleDenominator="0" sizeType="MM" opacity="1" maxScaleDenominator="1e+08" labelPlacementMethod="XHeight" sizeScale="3x:0,0,0,0,0,0" backgroundColor="#ffffff" diagramOrientation="Up" lineSizeType="MM" enabled="0" lineSizeScale="3x:0,0,0,0,0,0" rotationOffset="270" backgroundAlpha="255" penWidth="0">
      <fontProperties description="MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0" style=""/>
      <attribute label="" color="#000000" field=""/>
    </DiagramCategory>
  </SingleCategoryDiagramRenderer>
  <DiagramLayerSettings showAll="1" dist="0" placement="0" obstacle="0" priority="0" linePlacementFlags="18" zIndex="0">
    <properties>
      <Option type="Map">
        <Option value="" type="QString" name="name"/>
        <Option name="properties"/>
        <Option value="collection" type="QString" name="type"/>
      </Option>
    </properties>
  </DiagramLayerSettings>
  <geometryOptions removeDuplicateNodes="0" geometryPrecision="0">
    <activeChecks/>
    <checkConfiguration/>
  </geometryOptions>
  <fieldConfiguration>
    <field name="fid">
      <editWidget type="TextEdit">
        <config>
          <Option/>
        </config>
      </editWidget>
    </field>
    <field name="osm_id">
      <editWidget type="TextEdit">
        <config>
          <Option/>
        </config>
      </editWidget>
    </field>
    <field name="name">
      <editWidget type="TextEdit">
        <config>
          <Option/>
        </config>
      </editWidget>
    </field>
    <field name="amenity">
      <editWidget type="TextEdit">
        <config>
          <Option/>
        </config>
      </editWidget>
    </field>
    <field name="hstore_to_json">
      <editWidget type="TextEdit">
        <config>
          <Option/>
        </config>
      </editWidget>
    </field>
  </fieldConfiguration>
  <aliases>
    <alias index="0" field="fid" name=""/>
    <alias index="1" field="osm_id" name=""/>
    <alias index="2" field="name" name=""/>
    <alias index="3" field="amenity" name=""/>
    <alias index="4" field="hstore_to_json" name=""/>
  </aliases>
  <excludeAttributesWMS/>
  <excludeAttributesWFS/>
  <defaults>
    <default applyOnUpdate="0" expression="" field="fid"/>
    <default applyOnUpdate="0" expression="" field="osm_id"/>
    <default applyOnUpdate="0" expression="" field="name"/>
    <default applyOnUpdate="0" expression="" field="amenity"/>
    <default applyOnUpdate="0" expression="" field="hstore_to_json"/>
  </defaults>
  <constraints>
    <constraint exp_strength="0" field="fid" constraints="3" unique_strength="1" notnull_strength="1"/>
    <constraint exp_strength="0" field="osm_id" constraints="0" unique_strength="0" notnull_strength="0"/>
    <constraint exp_strength="0" field="name" constraints="0" unique_strength="0" notnull_strength="0"/>
    <constraint exp_strength="0" field="amenity" constraints="0" unique_strength="0" notnull_strength="0"/>
    <constraint exp_strength="0" field="hstore_to_json" constraints="0" unique_strength="0" notnull_strength="0"/>
  </constraints>
  <constraintExpressions>
    <constraint field="fid" exp="" desc=""/>
    <constraint field="osm_id" exp="" desc=""/>
    <constraint field="name" exp="" desc=""/>
    <constraint field="amenity" exp="" desc=""/>
    <constraint field="hstore_to_json" exp="" desc=""/>
  </constraintExpressions>
  <expressionfields/>
  <attributeactions>
    <defaultAction value="{00000000-0000-0000-0000-000000000000}" key="Canvas"/>
  </attributeactions>
  <attributetableconfig sortOrder="0" sortExpression="" actionWidgetStyle="dropDown">
    <columns>
      <column type="field" width="-1" hidden="0" name="fid"/>
      <column type="field" width="-1" hidden="0" name="osm_id"/>
      <column type="field" width="-1" hidden="0" name="name"/>
      <column type="field" width="-1" hidden="0" name="amenity"/>
      <column type="field" width="-1" hidden="0" name="hstore_to_json"/>
      <column type="actions" width="-1" hidden="1"/>
    </columns>
  </attributetableconfig>
  <conditionalstyles>
    <rowstyles/>
    <fieldstyles/>
  </conditionalstyles>
  <editform tolerant="1"></editform>
  <editforminit/>
  <editforminitcodesource>0</editforminitcodesource>
  <editforminitfilepath></editforminitfilepath>
  <editforminitcode><![CDATA[# -*- coding: utf-8 -*-
"""
QGIS forms can have a Python function that is called when the form is
opened.

Use this function to add extra logic to your forms.

Enter the name of the function in the "Python Init function"
field.
An example follows:
"""
from qgis.PyQt.QtWidgets import QWidget

def my_form_open(dialog, layer, feature):
	geom = feature.geometry()
	control = dialog.findChild(QWidget, "MyLineEdit")
]]></editforminitcode>
  <featformsuppress>0</featformsuppress>
  <editorlayout>generatedlayout</editorlayout>
  <editable>
    <field editable="1" name="amenity"/>
    <field editable="1" name="fid"/>
    <field editable="1" name="hstore_to_json"/>
    <field editable="1" name="name"/>
    <field editable="1" name="osm_id"/>
  </editable>
  <labelOnTop>
    <field labelOnTop="0" name="amenity"/>
    <field labelOnTop="0" name="fid"/>
    <field labelOnTop="0" name="hstore_to_json"/>
    <field labelOnTop="0" name="name"/>
    <field labelOnTop="0" name="osm_id"/>
  </labelOnTop>
  <widgets/>
  <previewExpression>fid</previewExpression>
  <mapTip></mapTip>
  <layerGeometryType>0</layerGeometryType>
</qgis>
